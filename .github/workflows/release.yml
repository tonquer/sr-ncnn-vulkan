name: release
on:
  push:
    tags:
      - '*'
jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      PACKAGE_PREFIX: ${{ steps.get-package_prefix.outputs.PACKAGE_PREFIX }}
      HEAD_SHA_SHORT: ${{ steps.get-package_prefix.outputs.HEAD_SHA_SHORT }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: get-package_prefix
        id: get-package_prefix
        run: |
          LIB_NAME=waifu2x
          TAG_NAME=$(git describe --abbrev=0 --tags)
          HEAD_SHA_SHORT=$(git rev-parse --short HEAD)
          echo "::set-output name=PACKAGE_PREFIX::${LIB_NAME}-${TAG_NAME}"
          echo "::set-output name=HEAD_SHA_SHORT::${HEAD_SHA_SHORT}"

  ubuntu:
    needs: [setup]
    runs-on: ubuntu-latest
    env:
      PACKAGENAME: ${{ needs.setup.outputs.PACKAGE_PREFIX }}-py39-ubuntu-x86_64
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - name: cache-vulkansdk
        id: cache-vulkansdk
        uses: actions/cache@v1
        with:
          path: "1.2.162.0"
          key: vulkansdk-linux-x86_64-1.2.162.0
      - name: vulkansdk
        if: steps.cache-vulkansdk.outputs.cache-hit != 'true'
        run: |
          wget https://sdk.lunarg.com/sdk/download/1.2.162.0/linux/vulkansdk-linux-x86_64-1.2.162.0.tar.gz?Human=true \
               -O vulkansdk-linux-x86_64-1.2.162.0.tar.gz
          tar -xf vulkansdk-linux-x86_64-1.2.162.0.tar.gz
          rm -rf 1.2.162.0/source 1.2.162.0/samples
          find 1.2.162.0 -type f | grep -v -E 'vulkan|glslang' | xargs rm
      - name: install-python
        run: |
          sudo apt-get update
          sudo apt-get install --no-install-recommends --no-install-suggests \
                               python3.9 python3.9-dev
      - name: build
        run: |
          export VULKAN_SDK=`pwd`/1.2.162.0/x86_64
          mkdir build && cd build
          cmake -DCMAKE_BUILD_TYPE=Release \
                -DNCNN_VULKAN=ON \
                -DNCNN_BUILD_TOOLS=OFF \
                -DNCNN_BUILD_EXAMPLES=OFF \
                -DPYTHON_EXECUTABLE=/usr/bin/python3.9 \
                -DPYBIND11_FINDPYTHON=OFF \
                -DPYBIND11_PYTHON_VERSION="3.9.5" \
                ../src
          cmake --build . -j 2
          cp libwaifu2x.so waifu2x.so
          strip -x waifu2x.so
      - name: package
        run: |
          mkdir -p ${{ env.PACKAGENAME }}
          cp README.md LICENSE ${{ env.PACKAGENAME }}
          cp build/waifu2x.so ${{ env.PACKAGENAME }}
          cp -r models test ${{ env.PACKAGENAME }}
          zip -9 -r $PACKAGENAME.zip $PACKAGENAME
      - name: upload
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.PACKAGENAME }}
          path: ${{ env.PACKAGENAME }}.zip

  openmp-macos:
    runs-on: macos-latest
    steps:
      - name: cache-openmp
        id: cache-openmp
        uses: actions/cache@v1
        with:
          path: openmp-install
          key: openmp-macos-release-11.0.0
      - name: checkout
        if: steps.cache-openmp.outputs.cache-hit != 'true'
        uses: actions/checkout@v2
      - name: openmp
        if: steps.cache-openmp.outputs.cache-hit != 'true'
        run: |
          wget https://github.com/llvm/llvm-project/releases/download/llvmorg-11.0.0/openmp-11.0.0.src.tar.xz
          tar -xf openmp-11.0.0.src.tar.xz
          cd openmp-11.0.0.src
          sed -i'' -e '/.size __kmp_unnamed_critical_addr/d' runtime/src/z_Linux_asm.S
          sed -i'' -e 's/__kmp_unnamed_critical_addr/___kmp_unnamed_critical_addr/g' runtime/src/z_Linux_asm.S
      - name: build
        if: steps.cache-openmp.outputs.cache-hit != 'true'
        run: |
          cd openmp-11.0.0.src
          mkdir -p build && cd build
          cmake -DCMAKE_BUILD_TYPE=Release \
                -DCMAKE_INSTALL_PREFIX=install \
                -DCMAKE_OSX_ARCHITECTURES="x86_64;arm64" \
                -DLIBOMP_ENABLE_SHARED=OFF \
                -DLIBOMP_OMPT_SUPPORT=OFF \
                -DLIBOMP_USE_HWLOC=OFF \
                ..
          cmake --build . -j 2
          cmake --build . --target install
      - name: copy-out-library
        if: steps.cache-openmp.outputs.cache-hit != 'true'
        run: |
          cp -r openmp-11.0.0.src/build/install openmp-install
      - name: upload
        uses: actions/upload-artifact@v2
        with:
          name: openmp-macos
          path: openmp-install

  macos:
    needs: [setup, openmp-macos]
    runs-on: macos-latest
    env:
      DEVELOPER_DIR: /Applications/Xcode_12.2.app/Contents/Developer
      PACKAGENAME: ${{ needs.setup.outputs.PACKAGE_PREFIX }}-py38-macos-x86_64-arm64
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - name: download-openmp-macos
        uses: actions/download-artifact@v2
        with:
          name: openmp-macos
          path: openmp-macos
      - name: install-openmp
        run: |
          sudo cp openmp-macos/include/* \
                  $DEVELOPER_DIR/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include
          sudo cp openmp-macos/lib/libomp.a \
                  $DEVELOPER_DIR/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/lib
      - name: cache-vulkansdk
        id: cache-vulkansdk
        uses: actions/cache@v1
        with:
          path: "vulkansdk-macos-1.2.162.0"
          key: vulkansdk-macos-1.2.162.0
      - name: vulkansdk
        if: steps.cache-vulkansdk.outputs.cache-hit != 'true'
        run: |
          wget https://sdk.lunarg.com/sdk/download/1.2.162.0/mac/vulkansdk-macos-1.2.162.0.dmg?Human=true \
               -O vulkansdk-macos-1.2.162.0.dmg
          hdiutil attach vulkansdk-macos-1.2.162.0.dmg
          cp -r /Volumes/vulkansdk-macos-1.2.162.0 .
          rm -rf vulkansdk-macos-1.2.162.0/Applications
          find vulkansdk-macos-1.2.162.0 -type f | grep -v -E 'vulkan|glslang|MoltenVK' | xargs rm
          hdiutil detach /Volumes/vulkansdk-macos-1.2.162.0
      - name: build-x86_64
        run: |
          export VULKAN_SDK=`pwd`/vulkansdk-macos-1.2.162.0/macOS
          mkdir build-x86_64 && cd build-x86_64
          cmake -DCMAKE_BUILD_TYPE=Release \
                -DNCNN_VULKAN=ON \
                -DNCNN_BUILD_TOOLS=OFF \
                -DNCNN_BUILD_EXAMPLES=OFF \
                -DUSE_STATIC_MOLTENVK=ON \
                -DPYTHON_EXECUTABLE=$DEVELOPER_DIR/Library/Frameworks/Python3.framework/Versions/3.8/bin/python3.8 \
                -DPYBIND11_FINDPYTHON=OFF \
                -DPYBIND11_PYTHON_VERSION="3.8.2" \
                -DCMAKE_SYSTEM_PROCESSOR=x86_64 \
                -DCMAKE_OSX_ARCHITECTURES=x86_64 \
                -DOpenMP_C_FLAGS="-Xclang -fopenmp" \
                -DOpenMP_CXX_FLAGS="-Xclang -fopenmp" \
                -DOpenMP_C_LIB_NAMES="libomp"\
                -DOpenMP_CXX_LIB_NAMES="libomp" \
                -DOpenMP_libomp_LIBRARY="$DEVELOPER_DIR/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/lib/libomp.a" \
                -DVulkan_INCLUDE_DIR=$VULKAN_SDK/../MoltenVK/include \
                -DVulkan_LIBRARY=$VULKAN_SDK/../MoltenVK/MoltenVK.xcframework/macos-arm64_x86_64/libMoltenVK.a \
                ../src
          cmake --build . -j 2
      - name: build-arm64
        run: |
          export VULKAN_SDK=`pwd`/vulkansdk-macos-1.2.162.0/macOS
          mkdir build-arm64 && cd build-arm64
          cmake -DCMAKE_BUILD_TYPE=Release \
                -DNCNN_VULKAN=ON \
                -DNCNN_BUILD_TOOLS=OFF \
                -DNCNN_BUILD_EXAMPLES=OFF \
                -DUSE_STATIC_MOLTENVK=ON \
                -DPYTHON_EXECUTABLE=$DEVELOPER_DIR/Library/Frameworks/Python3.framework/Versions/3.8/bin/python3.8 \
                -DPYBIND11_FINDPYTHON=OFF \
                -DPYBIND11_PYTHON_VERSION="3.8.2" \
                -DCMAKE_CROSSCOMPILING=ON \
                -DCMAKE_SYSTEM_PROCESSOR=arm64 \
                -DCMAKE_OSX_ARCHITECTURES=arm64 \
                -DOpenMP_C_FLAGS="-Xclang -fopenmp" \
                -DOpenMP_CXX_FLAGS="-Xclang -fopenmp" \
                -DOpenMP_C_LIB_NAMES="libomp"\
                -DOpenMP_CXX_LIB_NAMES="libomp" \
                -DOpenMP_libomp_LIBRARY="$DEVELOPER_DIR/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/lib/libomp.a" \
                -DVulkan_INCLUDE_DIR=$VULKAN_SDK/../MoltenVK/include \
                -DVulkan_LIBRARY=$VULKAN_SDK/../MoltenVK/MoltenVK.xcframework/macos-arm64_x86_64/libMoltenVK.a \
                ../src
          cmake --build . -j 2
      - name: build
        run: |
          lipo -create build-x86_64/libwaifu2x.dylib build-arm64/libwaifu2x.dylib -o waifu2x.so
          strip -x waifu2x.so
      - name: package
        run: |
          mkdir -p ${{ env.PACKAGENAME }}
          cp README.md LICENSE ${{ env.PACKAGENAME }}
          cp waifu2x.so ${{ env.PACKAGENAME }}
          cp -r models test ${{ env.PACKAGENAME }}
          zip -9 -r $PACKAGENAME.zip $PACKAGENAME
      - name: upload
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.PACKAGENAME }}
          path: ${{ env.PACKAGENAME }}.zip

  macos-script:
    needs: [setup]
    runs-on: macos-latest
    env:
      PACKAGENAME: ${{ needs.setup.outputs.PACKAGE_PREFIX }}-py39-macos-x86_64
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
          fetch-depth: '0'
      - name: run-build-script
        run: |
          . build_mac.sh
      - name: rename-and-package
        run: |
          cp -r \
            ${{ needs.setup.outputs.PACKAGE_PREFIX }}_${{ needs.setup.outputs.HEAD_SHA_SHORT }}-py39-macos \
            $PACKAGENAME
          zip -9 -r $PACKAGENAME.zip $PACKAGENAME
      - name: upload
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.PACKAGENAME }}
          path: ${{ env.PACKAGENAME }}.zip

  windows:
    needs: [setup]
    runs-on: windows-latest
    env:
      PACKAGENAME: ${{ needs.setup.outputs.PACKAGE_PREFIX }}-py39-windows-x64
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - name: cache-vulkansdk
        id: cache-vulkansdk
        uses: actions/cache@v1
        with:
          path: "VulkanSDK"
          key: VulkanSDK-1.2.162.0-Installer
      - name: vulkansdk
        if: steps.cache-vulkansdk.outputs.cache-hit != 'true'
        run: |
          Invoke-WebRequest -Uri `
            https://sdk.lunarg.com/sdk/download/1.2.162.0/windows/VulkanSDK-1.2.162.0-Installer.exe?Human=true `
            -OutFile VulkanSDK-1.2.162.0-Installer.exe
          7z x -aoa .\VulkanSDK-1.2.162.0-Installer.exe -oVulkanSDK
          Remove-Item .\VulkanSDK\Demos, `
                      .\VulkanSDK\Samples, `
                      .\VulkanSDK\Third-Party, `
                      .\VulkanSDK\Tools, `
                      .\VulkanSDK\Tools32, `
                      .\VulkanSDK\Bin32, `
                      .\VulkanSDK\Lib32 `
                      -Recurse
      - name: install-python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9.5'
      - name: build
        run: |
          $Env:VULKAN_SDK=((Get-Location).Path + '\VulkanSDK')
          mkdir build; Set-Location .\build\
          cmake -A x64 `
                -DNCNN_VULKAN=ON `
                -DNCNN_BUILD_TOOLS=OFF `
                -DNCNN_BUILD_EXAMPLES=OFF `
                -DPYTHON_EXECUTABLE="$($Env:pythonLocation + '\python.exe')" `
                -DPYBIND11_FINDPYTHON=OFF `
                -DPYBIND11_PYTHON_VERSION=3 `
                ..\src
          Copy-Item -Verbose -Path "$($Env:pythonLocation + '\libs\python39.lib')" -Destination "$((Get-Location).Path)"
          cmake --build . --config Release -j 2
          Set-Location .\Release\
          Copy-Item waifu2x.dll waifu2x.pyd
      - name: package
        run: |
          mkdir ${{ env.PACKAGENAME }}
          Copy-Item -Verbose -Path "README.md" -Destination "${{ env.PACKAGENAME }}"
          Copy-Item -Verbose -Path "LICENSE" -Destination "${{ env.PACKAGENAME }}"
          Copy-Item -Verbose -Path "build\Release\waifu2x.pyd" -Destination "${{ env.PACKAGENAME }}"
          Copy-Item -Verbose -Recurse -Path "models" -Destination "${{ env.PACKAGENAME }}"
          Copy-Item -Verbose -Recurse -Path "test" -Destination "${{ env.PACKAGENAME }}"
          7z a -r "$($Env:PACKAGENAME + '.zip')" "$($Env:PACKAGENAME)"
      - name: upload
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.PACKAGENAME }}
          path: ${{ env.PACKAGENAME }}.zip

  release:
    needs: [setup, ubuntu, macos, windows]
    runs-on: ubuntu-latest
    steps:
      - name: download
        uses: actions/download-artifact@v2
        with:
          path: artifacts

      - name: create-release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.setup.outputs.TAG_NAME }}
          release_name: ${{ needs.setup.outputs.TAG_NAME }}
          draft: true
          prerelease: true

      - name: upload-ubuntu
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PACKAGENAME: ${{ needs.setup.outputs.PACKAGE_PREFIX }}-py39-ubuntu-x86_64
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/${{ env.PACKAGENAME }}/${{ env.PACKAGENAME }}.zip
          asset_name: ${{ env.PACKAGENAME }}.zip
          asset_content_type: application/zip

      - name: upload-macos-py38
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PACKAGENAME: ${{ needs.setup.outputs.PACKAGE_PREFIX }}-py38-macos-x86_64-arm64
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/${{ env.PACKAGENAME }}/${{ env.PACKAGENAME }}.zip
          asset_name: ${{ env.PACKAGENAME }}.zip
          asset_content_type: application/zip

      - name: upload-macos-py39
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PACKAGENAME: ${{ needs.setup.outputs.PACKAGE_PREFIX }}-py39-macos-x86_64
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/${{ env.PACKAGENAME }}/${{ env.PACKAGENAME }}.zip
          asset_name: ${{ env.PACKAGENAME }}.zip
          asset_content_type: application/zip

      - name: upload-windows
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PACKAGENAME: ${{ needs.setup.outputs.PACKAGE_PREFIX }}-py39-windows-x64
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/${{ env.PACKAGENAME }}/${{ env.PACKAGENAME }}.zip
          asset_name: ${{ env.PACKAGENAME }}.zip
          asset_content_type: application/zip
